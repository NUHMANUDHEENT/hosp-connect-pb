syntax = "proto3";

package appointment;

import "google/protobuf/timestamp.proto";

option go_package = "/appointment";

// Service Definition
service AppointmentService {
    // Check available doctors and their next available time slot
    rpc CheckAvailability(GetAvailabilityRequest) returns (GetAvailabilityResponse);

    rpc CheckAvailabilityByDoctorId(CheckAvailabilityByDoctorIdRequest) returns (CheckAvailabilityByDoctorIdResponse);

    // Confirm an appointment for a specific doctor and time
    rpc ConfirmAppointment(ConfirmAppointmentRequest) returns (ConfirmAppointmentResponse);

    // Complete payment for an appointment
    rpc CompletePayment(CompletePaymentRequest) returns (CompletePaymentResponse);

    rpc GetUpcomingAppointments(GetAppointmentsRequest) returns (GetAppointmentsResponse);
}


message GetAvailabilityRequest {
    string doctor_id = 1;    // ID of the doctor whose availability we are checking
    google.protobuf.Timestamp requested_date_time = 2;   // Start date of availability range
    int32 category_id = 3;   // ID of the doctor category
  }
  
  message GetAvailabilityResponse {
    repeated AvailabilitySlot available_slots = 1;  // List of available slots
  }
  message CheckAvailabilityByDoctorIdRequest{
    string doctor_id =1;
    google.protobuf.Timestamp requested_date_time = 2;
  }
  message CheckAvailabilityByDoctorIdResponse{
    bool available_status = 1;
    string status = 2;
    string message = 3;
  }
  message AvailabilitySlot {
    string doctor_id = 1;    // ID of the doctor
    string doctor_name = 2;  // Name of the doctor
  }

// Request to confirm an appointment
message ConfirmAppointmentRequest {
    string patient_id = 1;    // ID of the patient
    string doctor_id = 2;     // ID of the doctor
    int32 specialization_id = 3;
    google.protobuf.Timestamp confirmed_date_time = 4; // Confirmed appointment time
}

// Response after confirming an appointment
message ConfirmAppointmentResponse {
    string status = 2;            // Status of the appointment confirmation
    string message = 3;           // Any relevant message (e.g., "Appointment confirmed")
    int32 status_code = 4;
    int32 appointment_id = 5;
    string payment_url =6;
}

// Request to complete the payment for a confirmed appointment
message CompletePaymentRequest {
    string appointment_id = 1;    // ID of the confirmed appointment
    string payment_method = 2;    // Payment method (e.g., "credit_card", "paypal")
    string payment_id = 3;
    double amount = 4;            // Amount to be paid
}

// Response after completing the payment
message CompletePaymentResponse {
    string status = 1;            // Status of the payment (e.g., "success", "failed")
    string message = 2;           // Payment-related message
    int32 status_code = 3;
}
message GetAppointmentsRequest {
  string patient_id = 1;
}

message Appointment {
  string appointment_id = 1;
  string doctor_id = 2;
  string patient_id = 3;
  string doctor_name = 4;
  string specialization = 5;
  string appointment_time = 6; // Timestamp in ISO 8601 format
}

message GetAppointmentsResponse {
  repeated Appointment appointments = 1;
  string message = 2; 
  string status = 3;
  int32 status_code = 4;
}