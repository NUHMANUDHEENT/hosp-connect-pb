// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	CreateRazorOrderId(ctx context.Context, in *CreateRazorOrderIdRequest, opts ...grpc.CallOption) (*CreateRazorOrderIdResponse, error)
	CreateAppointmentFeePayment(ctx context.Context, in *CreateAppointmentFeePaymentRequest, opts ...grpc.CallOption) (*CreateAppointmentFeePaymentResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) CreateRazorOrderId(ctx context.Context, in *CreateRazorOrderIdRequest, opts ...grpc.CallOption) (*CreateRazorOrderIdResponse, error) {
	out := new(CreateRazorOrderIdResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/CreateRazorOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateAppointmentFeePayment(ctx context.Context, in *CreateAppointmentFeePaymentRequest, opts ...grpc.CallOption) (*CreateAppointmentFeePaymentResponse, error) {
	out := new(CreateAppointmentFeePaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/CreateAppointmentFeePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	CreateRazorOrderId(context.Context, *CreateRazorOrderIdRequest) (*CreateRazorOrderIdResponse, error)
	CreateAppointmentFeePayment(context.Context, *CreateAppointmentFeePaymentRequest) (*CreateAppointmentFeePaymentResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) CreateRazorOrderId(context.Context, *CreateRazorOrderIdRequest) (*CreateRazorOrderIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRazorOrderId not implemented")
}
func (UnimplementedPaymentServiceServer) CreateAppointmentFeePayment(context.Context, *CreateAppointmentFeePaymentRequest) (*CreateAppointmentFeePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointmentFeePayment not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s *grpc.Server, srv PaymentServiceServer) {
	s.RegisterService(&_PaymentService_serviceDesc, srv)
}

func _PaymentService_CreateRazorOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRazorOrderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateRazorOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/CreateRazorOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateRazorOrderId(ctx, req.(*CreateRazorOrderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateAppointmentFeePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentFeePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateAppointmentFeePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/CreateAppointmentFeePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateAppointmentFeePayment(ctx, req.(*CreateAppointmentFeePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRazorOrderId",
			Handler:    _PaymentService_CreateRazorOrderId_Handler,
		},
		{
			MethodName: "CreateAppointmentFeePayment",
			Handler:    _PaymentService_CreateAppointmentFeePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/payment.proto",
}
